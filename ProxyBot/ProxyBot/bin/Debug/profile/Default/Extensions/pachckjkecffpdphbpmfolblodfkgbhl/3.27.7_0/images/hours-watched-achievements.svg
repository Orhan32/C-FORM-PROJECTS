 *
 * Arguments:
 * 0: wire <OBJECT>
 * 1: selectionName <STRING>
 * 2: damage <NUMBER>
 * 3: source <OBJECT>
 * 4: projectile <STRING>
 *
 * Return Value:
 * None
 *
 * Example:
 * [wire, "selection", 5, source, "scrap"] call ace_concertina_wire_fnc_handleDamage
 *
 * Public: No
 */
params ["_wire", "", "_damage", "_source", ""];
if (_damage < 0.5) exitWith { 0 };

if (!(isNull _source)) then {
    _wire setVariable [QGVAR(lastDamager), _source];
};

_damage
#include "script_component.hpp"
/*
 * Author: Rocko
 * Handles wire Init
 *
 * Arguments:
 * 0: wire <OBJECT>
 *
 * Return Value:
 * None
 *
 * Example:
 * [wire] call ace_concertina_wire_fnc_handleInit
 *
 * Public: No
 */
params ["_wire"];
_wire addEventHandler ["HandleDamage", {call FUNC(handleDamage)}];
#include "script_component.hpp"
/*
 * Author: Rocko
 *
 * Handles wire and vehicle damage
 *
 * Arguments:
 * 0: wire <OBJECT>
 * 1: killer (vehicle) <OBJECT>
 *
 * Return Value:
 * None
 *
 * Example:
 * [wire, car] call ace_concertina_wire_fnc_handleKilled
 *
 * Public: No
 */
params ["_wire", "_killer"];
TRACE_2("params",_wire,_killer);

if (isNull _killer) then {
    _killer = _wire getVariable [QGVAR(lastDamager), objNull];
    if (isNull _killer) then {
        private _midPoint = ((_wire selectionPosition "start") vectorAdd (_wire selectionPosition "deploy")) vectorMultiply 0.5;
        {
            if ((vectorMagnitude velocity _x) > 0) exitWith {_killer = _x};
        } forEach (nearestObjects [(_wire modelToWorld _midPoint), ["Car"], 8]);
    };
};
if (isNull _killer || {_killer == _wire} || {_killer == gunner (vehicle _killer)}) exitWith {};

private _distance = _wire distance _killer;
if (_distance > 14 || {_distance < 2}) exitWith {}; // Fix if shooting wire

private _vehicle = vehicle _killer;

[QGVAR(vehicleDamage), [_wire, _vehicle], [_vehicle]] call CBA_fnc_targetEvent;
#include "script_component.hpp"
/*
 * Author: Rocko
 * Handles vehicle damage from hitting wire
 *
 * Arguments:
 * 0: wire <OBJECT>
 * 1: vehicle <OBJECT>
 *
 * Return Value:
 * None
 *
 * Example:
 * [wire, car] call ace_concertina_wire_fnc_vehicleDamage
 *
 * Public: No
 */
params ["_wire", "_vehicle"];

private _type = typeOf _wire;
priva